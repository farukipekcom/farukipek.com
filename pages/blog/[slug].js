// import Twitter from "../../components/icons/twitter";
// import Copy from "../../components/icons/copy";
import styles from "./post.module.scss";
import {format, parseISO} from "date-fns";
import Page from "../../components/page/page";
import {supabase} from "../api/supabaseClient";
import {useEffect, useState} from "react";
export default function Post({post}) {
  const [active, setActive] = useState(false);
  const [sessionLike, setSessionLike] = useState(0);
  const [like, setLike] = useState(post.post_like);
  const handleLike = () => {
    setSessionLike(sessionLike + 1);
    setActive(true);
  };
  useEffect(() => {
    const timeout = setTimeout(() => {
      setLike(like + sessionLike);
      setActive(false);
      setSessionLike(0);
    }, 3000);
    return () => {
      clearTimeout(timeout);
    };
  }, [sessionLike]);

  useEffect(() => {
    if (like !== 0) {
      const updatePost = async () => {
        const {data, error} = await supabase.from("posts").update({post_like: like}).eq("post_id", post.post_id).select("*");
      };
      updatePost();
    }
  }, [like]);

  return (
    <Page title={post.seo_title + " - Faruk Ipek"} desc={post.seo_description}>
      <div className={styles.container}>
        <div className={styles.heading}>
          <h1 className={styles.title}>{post.post_title}</h1>
          <div className={styles.info}>
            <span className={styles.date}>
              <time dateTime={post.created_at}>{format(parseISO(post.created_at), "d LLLL yyyy")}</time>
            </span>
            <span className={styles.readingtime}>{Math.ceil(post.post_content.trim().split(/\s+/).length / 200) + 1} min read</span>
            <div className={styles.headerLike}>
              <div className={styles.headerLikeIcon} onClick={handleLike}>
                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path d="M1.94314 13.2567C1.36509 12.5091 1.39261 11.4015 2.08077 10.7093C2.30098 10.4878 2.60376 10.3216 2.90655 10.2386C2.79645 9.98936 2.74139 9.71247 2.74139 9.43558C2.74139 8.90949 2.93408 8.43877 3.29192 8.07881C3.98007 7.38659 5.02607 7.33121 5.76927 7.88499C5.85185 7.66348 5.96196 7.44197 6.12711 7.24814C6.48496 6.8605 6.98043 6.6113 7.50342 6.6113C7.99889 6.58361 8.49437 6.77743 8.85221 7.13739C8.90726 7.05432 8.96231 6.94356 9.04489 6.88819C9.40273 6.50054 9.8982 6.25134 10.4212 6.25134C10.9717 6.22365 11.4672 6.44516 11.825 6.80512L14.5777 9.54633C14.8804 8.38339 15.9815 7.58041 17.1926 7.71886C17.523 7.74655 17.8257 7.91268 18.0459 8.13419C18.5414 7.58041 19.3122 7.24814 20.1104 7.33121C20.8536 7.41428 21.4317 8.05113 21.4317 8.82642L21.4041 12.8413C21.4041 13.8935 21.5418 14.9734 21.7895 15.9148V15.9425C22.34 17.8807 21.7895 19.9574 20.3857 21.3695C18.9268 22.8371 16.9724 23.64 14.9355 23.64C14.7703 23.64 14.5777 23.64 14.4125 23.6124C13.6418 23.8616 12.816 24 12.0177 24C10.0358 24 8.05395 23.2524 6.56753 21.7295L1.25498 16.3578C0.897141 15.9979 0.704458 15.4995 0.704458 15.0011C0.704458 14.475 0.897141 14.0043 1.25498 13.6443C1.44766 13.4782 1.6954 13.3397 1.94314 13.2567ZM11.0268 7.6081C10.8616 7.44197 10.6414 7.38659 10.4487 7.38659C10.2285 7.38659 10.0358 7.49735 9.8982 7.63579C9.81562 7.74655 9.76057 7.88499 9.76057 8.02344L14.3024 12.7029L14.44 11.0139L11.0268 7.6081ZM19.5874 20.5943C20.716 19.459 21.1289 17.8253 20.716 16.3025C20.4132 15.1949 20.2756 14.032 20.2756 12.869L20.3031 8.85411C20.3031 8.68797 20.1655 8.52184 20.0003 8.52184C19.2846 8.43877 18.6515 8.96486 18.5689 9.65709L18.5139 10.3216L18.4864 13.229C18.4864 14.2812 18.624 15.3333 18.8442 16.2748C18.8442 16.3025 18.8717 16.3025 18.8717 16.3301C19.4223 18.2684 18.8717 20.3451 17.4679 21.7572C17.3303 21.8956 17.1651 22.0341 17.0275 22.1725C17.9909 21.8403 18.8717 21.3142 19.5874 20.5943ZM2.05324 15.5825L7.36579 20.9542C9.92573 23.5293 14.1097 23.5293 16.6696 20.9542C17.7707 19.8466 18.2111 18.213 17.7982 16.6901V16.6624C17.4954 15.5272 17.3578 14.3919 17.3578 13.229V9.21406C17.3578 9.04793 17.2202 8.8818 17.055 8.8818C16.3393 8.79873 15.7062 9.32482 15.6236 10.017L15.431 12.8136C15.3759 13.229 15.1006 13.5889 14.7153 13.7274C14.3024 13.8658 13.8895 13.7551 13.5867 13.4782L8.13653 7.99575C7.97137 7.82961 7.83374 7.74655 7.55848 7.77424C7.33827 7.77424 7.14558 7.88499 7.00795 8.02344C6.76022 8.30033 6.78774 8.85411 7.09053 9.15869L11.1369 13.2567C11.3571 13.4782 11.3571 13.8381 11.1369 14.0596C11.0268 14.1704 10.8891 14.2258 10.724 14.2258C10.5864 14.2258 10.4212 14.1704 10.3111 14.0596L5.1637 8.8818C4.86091 8.57722 4.36544 8.57722 4.06265 8.8818C3.92502 9.02024 3.84244 9.21406 3.84244 9.43558C3.84244 9.65709 3.92502 9.85091 4.06265 9.98936L9.23757 15.1672C9.45778 15.3887 9.45778 15.7487 9.23757 15.9702C9.12747 16.0809 8.98984 16.1363 8.82468 16.1363C8.65952 16.1363 8.52189 16.0809 8.41179 15.9702L3.98007 11.5123C3.67728 11.2077 3.18181 11.2077 2.87903 11.5123C2.57624 11.8168 2.57624 12.3152 2.87903 12.6198L3.92502 13.672L4.69575 14.4196L7.33827 17.0777C7.55848 17.2993 7.55848 17.6592 7.33827 17.8807C7.22816 17.9915 7.09053 18.0469 6.92537 18.0469C6.76022 18.0469 6.62259 17.9915 6.51248 17.8807L3.12676 14.475C2.82397 14.1704 2.3285 14.1704 2.02571 14.475C1.88808 14.6134 1.8055 14.8072 1.8055 15.0288C1.8055 15.2503 1.88808 15.4441 2.05324 15.5825ZM5.60412 3.78702L4.20028 0.768914C4.06265 0.492024 3.73234 0.353579 3.45708 0.492024C3.18181 0.630469 3.04418 0.962737 3.18181 1.23963L4.55812 4.28542C4.66823 4.50693 4.86091 4.61769 5.08112 4.61769C5.1637 4.61769 5.24628 4.59 5.32886 4.56231C5.60412 4.42386 5.71422 4.06391 5.60412 3.78702ZM8.54942 0.713536C8.632 0.408957 8.43931 0.104377 8.13653 0.0213103C7.83374 -0.0617567 7.53095 0.104377 7.44837 0.408957L6.59506 3.62088C6.51248 3.92546 6.70516 4.23004 7.00795 4.31311C7.063 4.31311 7.11806 4.3408 7.14558 4.3408C7.39332 4.3408 7.61353 4.17466 7.69611 3.92546L8.54942 0.713536ZM0.319091 4.59L3.31944 6.00214C3.40202 6.02983 3.4846 6.05752 3.56718 6.05752C3.78739 6.05752 3.98007 5.94676 4.09018 5.72525C4.22781 5.44836 4.09018 5.0884 3.81492 4.97764L0.814563 3.5655C0.539301 3.42706 0.18146 3.5655 0.0713558 3.84239C-0.0938013 4.11929 0.0438296 4.45155 0.319091 4.59Z" />
                </svg>
                <div className={styles.headerLikeCount}>
                  {like}
                  <div className={`${styles.headerSessionLike} ${active && styles.yeni}`}>+{sessionLike}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className={styles.article} dangerouslySetInnerHTML={{__html: post.post_content}}></div>
        <div className={styles.like}>
          <div className={`${styles.sessionLike} ${active && styles.yeni}`}>+{sessionLike}</div>
          <div className={styles.icon} onClick={handleLike}>
            <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path d="M1.94314 13.2567C1.36509 12.5091 1.39261 11.4015 2.08077 10.7093C2.30098 10.4878 2.60376 10.3216 2.90655 10.2386C2.79645 9.98936 2.74139 9.71247 2.74139 9.43558C2.74139 8.90949 2.93408 8.43877 3.29192 8.07881C3.98007 7.38659 5.02607 7.33121 5.76927 7.88499C5.85185 7.66348 5.96196 7.44197 6.12711 7.24814C6.48496 6.8605 6.98043 6.6113 7.50342 6.6113C7.99889 6.58361 8.49437 6.77743 8.85221 7.13739C8.90726 7.05432 8.96231 6.94356 9.04489 6.88819C9.40273 6.50054 9.8982 6.25134 10.4212 6.25134C10.9717 6.22365 11.4672 6.44516 11.825 6.80512L14.5777 9.54633C14.8804 8.38339 15.9815 7.58041 17.1926 7.71886C17.523 7.74655 17.8257 7.91268 18.0459 8.13419C18.5414 7.58041 19.3122 7.24814 20.1104 7.33121C20.8536 7.41428 21.4317 8.05113 21.4317 8.82642L21.4041 12.8413C21.4041 13.8935 21.5418 14.9734 21.7895 15.9148V15.9425C22.34 17.8807 21.7895 19.9574 20.3857 21.3695C18.9268 22.8371 16.9724 23.64 14.9355 23.64C14.7703 23.64 14.5777 23.64 14.4125 23.6124C13.6418 23.8616 12.816 24 12.0177 24C10.0358 24 8.05395 23.2524 6.56753 21.7295L1.25498 16.3578C0.897141 15.9979 0.704458 15.4995 0.704458 15.0011C0.704458 14.475 0.897141 14.0043 1.25498 13.6443C1.44766 13.4782 1.6954 13.3397 1.94314 13.2567ZM11.0268 7.6081C10.8616 7.44197 10.6414 7.38659 10.4487 7.38659C10.2285 7.38659 10.0358 7.49735 9.8982 7.63579C9.81562 7.74655 9.76057 7.88499 9.76057 8.02344L14.3024 12.7029L14.44 11.0139L11.0268 7.6081ZM19.5874 20.5943C20.716 19.459 21.1289 17.8253 20.716 16.3025C20.4132 15.1949 20.2756 14.032 20.2756 12.869L20.3031 8.85411C20.3031 8.68797 20.1655 8.52184 20.0003 8.52184C19.2846 8.43877 18.6515 8.96486 18.5689 9.65709L18.5139 10.3216L18.4864 13.229C18.4864 14.2812 18.624 15.3333 18.8442 16.2748C18.8442 16.3025 18.8717 16.3025 18.8717 16.3301C19.4223 18.2684 18.8717 20.3451 17.4679 21.7572C17.3303 21.8956 17.1651 22.0341 17.0275 22.1725C17.9909 21.8403 18.8717 21.3142 19.5874 20.5943ZM2.05324 15.5825L7.36579 20.9542C9.92573 23.5293 14.1097 23.5293 16.6696 20.9542C17.7707 19.8466 18.2111 18.213 17.7982 16.6901V16.6624C17.4954 15.5272 17.3578 14.3919 17.3578 13.229V9.21406C17.3578 9.04793 17.2202 8.8818 17.055 8.8818C16.3393 8.79873 15.7062 9.32482 15.6236 10.017L15.431 12.8136C15.3759 13.229 15.1006 13.5889 14.7153 13.7274C14.3024 13.8658 13.8895 13.7551 13.5867 13.4782L8.13653 7.99575C7.97137 7.82961 7.83374 7.74655 7.55848 7.77424C7.33827 7.77424 7.14558 7.88499 7.00795 8.02344C6.76022 8.30033 6.78774 8.85411 7.09053 9.15869L11.1369 13.2567C11.3571 13.4782 11.3571 13.8381 11.1369 14.0596C11.0268 14.1704 10.8891 14.2258 10.724 14.2258C10.5864 14.2258 10.4212 14.1704 10.3111 14.0596L5.1637 8.8818C4.86091 8.57722 4.36544 8.57722 4.06265 8.8818C3.92502 9.02024 3.84244 9.21406 3.84244 9.43558C3.84244 9.65709 3.92502 9.85091 4.06265 9.98936L9.23757 15.1672C9.45778 15.3887 9.45778 15.7487 9.23757 15.9702C9.12747 16.0809 8.98984 16.1363 8.82468 16.1363C8.65952 16.1363 8.52189 16.0809 8.41179 15.9702L3.98007 11.5123C3.67728 11.2077 3.18181 11.2077 2.87903 11.5123C2.57624 11.8168 2.57624 12.3152 2.87903 12.6198L3.92502 13.672L4.69575 14.4196L7.33827 17.0777C7.55848 17.2993 7.55848 17.6592 7.33827 17.8807C7.22816 17.9915 7.09053 18.0469 6.92537 18.0469C6.76022 18.0469 6.62259 17.9915 6.51248 17.8807L3.12676 14.475C2.82397 14.1704 2.3285 14.1704 2.02571 14.475C1.88808 14.6134 1.8055 14.8072 1.8055 15.0288C1.8055 15.2503 1.88808 15.4441 2.05324 15.5825ZM5.60412 3.78702L4.20028 0.768914C4.06265 0.492024 3.73234 0.353579 3.45708 0.492024C3.18181 0.630469 3.04418 0.962737 3.18181 1.23963L4.55812 4.28542C4.66823 4.50693 4.86091 4.61769 5.08112 4.61769C5.1637 4.61769 5.24628 4.59 5.32886 4.56231C5.60412 4.42386 5.71422 4.06391 5.60412 3.78702ZM8.54942 0.713536C8.632 0.408957 8.43931 0.104377 8.13653 0.0213103C7.83374 -0.0617567 7.53095 0.104377 7.44837 0.408957L6.59506 3.62088C6.51248 3.92546 6.70516 4.23004 7.00795 4.31311C7.063 4.31311 7.11806 4.3408 7.14558 4.3408C7.39332 4.3408 7.61353 4.17466 7.69611 3.92546L8.54942 0.713536ZM0.319091 4.59L3.31944 6.00214C3.40202 6.02983 3.4846 6.05752 3.56718 6.05752C3.78739 6.05752 3.98007 5.94676 4.09018 5.72525C4.22781 5.44836 4.09018 5.0884 3.81492 4.97764L0.814563 3.5655C0.539301 3.42706 0.18146 3.5655 0.0713558 3.84239C-0.0938013 4.11929 0.0438296 4.45155 0.319091 4.59Z" />
            </svg>
            <div className={styles.count}>{like}</div>
          </div>
        </div>
      </div>

      {/* <CommentForm postId={post.postId} />
      {comments.length > 0 ? (
        <div className={styles.comment}>
          {comments.map((item) => {
            return (
              <>
                <Comment comment={item} />
              </>
            );
          })}
        </div>
      ) : (
        ""
      )} */}
      {/* <div className={styles.share}>
        <button className={styles.item}>
          <Twitter size={15} />
          Twitter
        </button>
        <button className={styles.item}>
          <Copy size={15} />
          Share
        </button>
      </div> */}
    </Page>
  );
}
export async function getStaticProps(context) {
  const {data} = await supabase.from("posts").select("*").eq("post_slug", context.params.slug);
  return {
    props: {
      post: data[0],
    },
    revalidate: 10,
  };
}
export async function getStaticPaths() {
  const {data} = await supabase.from("posts").select("*");
  const paths = data.map((post) => ({
    params: {slug: post.post_slug},
  }));
  return {paths, fallback: "blocking"};
}
